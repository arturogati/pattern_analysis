import asyncio
import sys
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∏–∑ –ø–∞–ø–∫–∏ patterns
from patterns.Down import DownSignals
from patterns.Long import LongSignals
import arbitrage

TOKEN = "8164995862:AAF0M7eCOyo3UzfngWdqR_beltZz5E9aQXk"


async def execute_short(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã Short - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–æ–¥—É–ª—å Down.py"""
    await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–≤–µ–∂—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
    try:
        down = DownSignals()
        results = await asyncio.gather(
            down.bearish_harami(),
            down.bearish_engulfing(),
            down.falling_stars(),
            down.bearish_harami_cross()
        )
        
        response = f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã—á—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:\n\n"
        for i, result in enumerate(results, 1):
            await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {result}")
        #patterns = ["Bearish Harami", "Bearish Engulfing", "Falling Stars", "Bearish Harami Cross"]
        
        # for pattern, result in zip(patterns, results):
        #     response += f"{pattern}: {len(result)} —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        #     if result:
        #         for i, item in enumerate(result[:3], 1):
        #             response += f"  {i}. {item.get('symbol', 'N/A')}\n"
        #     response += "\n"
        #await update.message.reply_text(response)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def execute_long(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã Long - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–æ–¥—É–ª—å Long.py"""
    await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—á—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
    try:
        long = LongSignals()
        results = await asyncio.gather(
            long.bullish_harami(),
            long.hammer(),
            long.inverted_hammer(),
            long.bullish_engufling(),
            long.bullish_window(),
            long.bullish_newLaws()
        )
        
        response = f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã—á—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:\n\n"
        for i, result in enumerate(results, 1):
            await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {result}")
       # patterns = [
            #"Bullish Harami", "Hammer", "Inverted Hammer",
            #"Bullish Engulfing", "Bullish Window", "8-10 New Laws"
        #]
        
        # for pattern, result in zip(patterns, results):
        #     response += f"{pattern}: {len(result)} —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        #     if result:
        #         for i, item in enumerate(result[:2], 1):
        #             response += f"  {i}. {item.get('symbol', 'N/A')}\n"
        #     response += "\n"
        
        #await update.message.reply_text(response)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def execute_arbitrage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ê—Ä–±–∏—Ç—Ä–∞–∂"""
    await update.message.reply_text("üîç –ò—â—É –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")
    try:
        result = await arbitrage.main()
        
        # response = "üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:\n\n"
        # if result:
        #     for i, item in enumerate(result[:5], 1):
        #         response += f"{i}. {item}\n"
        # else:
        #     response += "–ù–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        
        update.message.reply_text(result)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "‚Ä¢ Long - –±—ã—á—å–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
        "‚Ä¢ Short - –º–µ–¥–≤–µ–∂—å–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
        "‚Ä¢ –ê—Ä–±–∏—Ç—Ä–∞–∂ - –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.lower().strip()
    
    if text == "short":
        await execute_short(update, context)
    elif text == "long":
        await execute_long(update, context)
    elif text == "–∞—Ä–±–∏—Ç—Ä–∞–∂":
        await execute_arbitrage(update, context)
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: Long, Short, –ê—Ä–±–∏—Ç—Ä–∞–∂")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()


if __name__ == "__main__":
    main()