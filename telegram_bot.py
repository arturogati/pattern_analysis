from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

import patterns.Bear
import arbitrage
import patterns.Down

TOKEN = ""

# –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
async def execute_long(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîπ –í—ã –≤—ã–±—Ä–∞–ª–∏ LONG. –í—ã–ø–æ–ª–Ω—è—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∫—É–ø–∫–∏, —è –ø–æ–∫–∞ –µ—â–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π, –ø—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å 3 –º–∏–Ω—É—Ç—ã...")

async def execute_short(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîπ –í—ã –≤—ã–±—Ä–∞–ª–∏ SHORT. –í—ã–ø–æ–ª–Ω—è—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–¥–∞–∂–∏,—è –ø–æ–∫–∞ –µ—â–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π, –ø—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å 3 –º–∏–Ω—É—Ç—ã...")
    patterns.Down.DownSignals.bearish_harami()

async def execute_arbitrage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîπ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ê–†–ë–ò–¢–†–ê–ñ. –ò—â—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞,—è –ø–æ–∫–∞ –µ—â–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π, –ø—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å 3 –º–∏–Ω—É—Ç—ã...")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n"
        "‚úÖ **Long** ‚Äî –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∫—É–ø–∫–∏\n"
        "‚úÖ **Short** ‚Äî –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–¥–∞–∂–∏\n"
        "‚úÖ **–ê—Ä–±–∏—Ç—Ä–∞–∂** ‚Äî –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    
    if text == "long":
        await execute_long(update, context)
    elif text == "short":
        await execute_short(update, context)
    elif text == "–∞—Ä–±–∏—Ç—Ä–∞–∂":
        await execute_arbitrage(update, context)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –î–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: Long, Short, –ê—Ä–±–∏—Ç—Ä–∞–∂")

def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    app.run_polling()

if __name__ == "__main__":
    main()