from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import patterns.Down
import patterns.Long
import arbitrage.main
import arbitrage
import asyncio

TOKEN = ""

async def execute_short(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∑—ã–≤–∞–µ—Ç patterns.Down –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–≤–µ–∂—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (Down)...")
    try:
        result = await patterns.Down().main()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ main() –µ—Å—Ç—å –≤ patterns.Down
        await update.message.reply_text(f"üìâ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (Short):**\n\n{result}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def execute_long(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∑—ã–≤–∞–µ—Ç patterns.Long –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—á—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (Long)...")
    try:
        result = await patterns.Long().main()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ main() –µ—Å—Ç—å –≤ patterns.Long
        await update.message.reply_text(f"üìà **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (Long):**\n\n{result}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def execute_arbitrage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∑—ã–≤–∞–µ—Ç arbitrage.main –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    await update.message.reply_text("üîç –ò—â—É –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")
    try:
        result = await arbitrage.main()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ arbitrage.main() –∫–æ—Ä—É—Ç–∏–Ω–∞
        await update.message.reply_text(f"üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ê—Ä–±–∏—Ç—Ä–∞–∂):**\n\n{result}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "‚Ä¢ **Long** ‚Äî –±—ã—á—å–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
        "‚Ä¢ **Short** ‚Äî –º–µ–¥–≤–µ–∂—å–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
        "‚Ä¢ **–ê—Ä–±–∏—Ç—Ä–∞–∂** ‚Äî –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥."""
    text = update.message.text.lower().strip()
    
    if text == "short":
        await execute_short(update, context)
    elif text == "long":
        await execute_long(update, context)
    elif text == "–∞—Ä–±–∏—Ç—Ä–∞–∂":
        await execute_arbitrage(update, context)
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: Long, Short, –ê—Ä–±–∏—Ç—Ä–∞–∂")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()